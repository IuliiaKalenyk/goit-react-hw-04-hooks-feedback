{"version":3,"sources":["components/Statistics/Statistics.styled.jsx","components/Statistics/Statistics.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Container/Container.styled.jsx","components/Container/Container.jsx","components/Button/Button.styled.jsx","components/Button/Button.jsx","components/FeedbackOptions/FeedbackOptions.styled.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","App.js","index.js"],"names":["List","styled","ul","Item","li","Text","p","Statistics","good","neutral","bad","total","positivePercentage","percentage","Wrapper","section","Title","h2","Section","title","children","div","Container","FeedbackButton","button","Button","grade","onClick","type","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","option","Notification","App","useState","setGood","setNeutral","setBad","countTotalFeedback","totalFeedback","Math","round","countPositiveFeedbackPercentage","e","currentTarget","dataset","prevState","message","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e628f5d.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const List = styled.ul`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\nlist-style: none;\r\n  &:not(:last-child) {\r\n    margin-right: 50px;\r\n  }\r\n`;\r\n\r\nexport const Text = styled.p`\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 24px;\r\n  font-weight: 500;\r\n  color: #1707f65a;\r\n  `;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { List, Item, Text } from \"./Statistics.styled\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage = 0 }) => {\r\n  return (\r\n    <List>\r\n      <Item>\r\n        <Text good>\r\n        Good: {good}\r\n        </Text>\r\n      </Item>\r\n      <Item>\r\n        <Text neutral>\r\n        Neutral: {neutral}\r\n        </Text>\r\n      </Item>\r\n      <Item>\r\n        <Text bad>\r\n        Bad: {bad}\r\n        </Text>\r\n      </Item>\r\n      <Item>\r\n        <Text total>\r\n        Total: {total}\r\n        </Text>\r\n      </Item>\r\n      <Item>\r\n        <Text percentage>\r\n        Positive: {positivePercentage} %\r\n        </Text>\r\n      </Item>\r\n    </List>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;","import styled from \"@emotion/styled\";\r\n\r\nexport const Wrapper = styled.section`\r\n  padding: 40px 0;\r\n`;\r\nexport const Title = styled.h2`\r\n  /* display: flex;\r\n  justify-content: center; */\r\n  /* align-items: center; */\r\n  margin-bottom: 50px;\r\n  margin-left: 0;\r\n  margin-right: 0;\r\n  text-transform: uppercase;\r\n  font-size: 32px;\r\n  text-align: center;\r\n  \r\n`;\r\n\r\n/* export const Container = styled.div``;\r\nexport const FeedbackTitle = styled.h1``;\r\nexport const FeedbackMarks = styled.div``;\r\n\r\nexport const FeedbackStatistics = styled.h2``;\r\nexport const FeedbackList = styled.ul``;\r\nexport const FeedbackItem = styled.li``; */","import PropTypes from \"prop-types\";\r\nimport { Wrapper, Title } from \"./Section.styled\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <Wrapper>\r\n      {title && (\r\n        <Title>\r\n          {title}\r\n        </Title>\r\n      )}\r\n\r\n      {children}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;","import styled from \"@emotion/styled\";\r\n\r\nexport const Wrapper = styled.div`\r\n  width: 100%;\r\n  padding: 0;\r\n`;","import PropTypes from \"prop-types\";\r\nimport { Wrapper } from \"./Container.styled\";\r\n\r\nconst Container = ({ children }) => {\r\n  return <Wrapper>{children}</Wrapper>;\r\n};\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Container;","import styled from '@emotion/styled';\r\n\r\nexport const FeedbackButton = styled.button`\r\nwidth: 150px;\r\n  padding: 5px 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\r\n    0px 2px 1px rgba(0, 0, 0, 0.2);\r\n  border-radius: 0px 0px 4px 4px;\r\n  cursor: pointer;\r\n  outline: none;\r\n text-transform: capitalize;\r\n  font-size: 18px;\r\n  font-weight: 500;\r\n  background-color: transparent;\r\n  transition: all 250ms ease-in-out;\r\n    &:hover,\r\n  &:focus-visible {\r\n    transform: scale(1.2);\r\n     background-color: rgb(250, 140, 15);\r\n    box-shadow: 0px 8px 43px rgba(255, 107, 1, 0.6);\r\n     \r\n  }\r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FeedbackButton } from './Button.styled';\r\n\r\nconst Button = ({ grade, onClick }) => {\r\n    return (\r\n        <FeedbackButton type=\"button\" data-grade={grade} onClick={onClick}>\r\n            {grade === \"good\"}\r\n            {grade === \"neutral\"}\r\n            {grade === \"bad\"}\r\n            {grade}\r\n        </FeedbackButton>\r\n    );\r\n};\r\nButton.propTypes = {\r\n  grade: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Button;","import styled from '@emotion/styled';\r\n\r\nexport const List = styled.ul`\r\ndisplay: flex;\r\n  justify-content: center;\r\n  list-style: none;\r\n  padding: 0;\r\n  text-align: center;\r\n   \r\n`;\r\n\r\nexport const Item = styled.li`\r\n background-color: rgba(125, 38, 206, 0.14);\r\n  &:not(:last-child) {\r\n    margin-right: 50px;\r\n    \r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport Button from 'components/Button/Button';\r\nimport { List, Item } from './FeedbackOptions.styled';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  options = Object.keys(options);\r\n  return (\r\n    <List>\r\n      {options.map(option => (\r\n        <Item key={option}>\r\n          <Button grade={option} onClick={onLeaveFeedback} />\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.shape({\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Text = styled.p`\r\n  /* display: flex;\r\n  align-items: center;\r\n  justify-content: center; */\r\n  text-align: center;\r\n  font-size: 18px;\r\n  font-weight: 500;\r\n  color: cornflowerblue;\r\n  `;","import { Text } from \"./Notification.styled\";\r\n\r\nconst Notification = () => (\r\n  <Text>\r\n    No feedback given\r\n  </Text>\r\n);\r\n\r\nexport default Notification;","import './App.css';\nimport React from 'react';\nimport { useState } from 'react';\nimport Statistics from './components/Statistics/Statistics';\nimport Section from './components/Section/Section';\nimport Container from './components/Container/Container';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Notification from './components/Notification/Notification';\n\nconst App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleFeedbackOptions = e => {\n    const grade = e.currentTarget.dataset.grade;\n\n    switch (grade) {\n      case 'good':\n        setGood(prevState => prevState + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(prevState => prevState + 1);\n        break;\n\n      case 'bad':\n        setBad(prevState => prevState + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = countTotalFeedback();\n\n    return Math.round((good * 100) / total);\n  };\n\n  const totalFeedback = countTotalFeedback();\n  const positivePercentage = countPositiveFeedbackPercentage();\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <Container>\n          <FeedbackOptions\n            options={{ good, neutral, bad }}\n            onLeaveFeedback={handleFeedbackOptions}\n          />\n        </Container>\n      </Section>\n\n      <Section title=\"Statistics\">\n        <Container>\n          {totalFeedback > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={totalFeedback}\n              positivePercentage={positivePercentage}\n            />\n          ) : (\n            <Notification message=\"No feedback given\"></Notification>\n          )}\n        </Container>\n      </Section>\n    </>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}